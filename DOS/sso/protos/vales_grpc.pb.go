// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: vales.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValesClient is the client API for Vales service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValesClient interface {
	AlterUser(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*AlterUserResponse, error)
	AuthUser(ctx context.Context, in *UserCredentialsRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
}

type valesClient struct {
	cc grpc.ClientConnInterface
}

func NewValesClient(cc grpc.ClientConnInterface) ValesClient {
	return &valesClient{cc}
}

func (c *valesClient) AlterUser(ctx context.Context, in *UserDataRequest, opts ...grpc.CallOption) (*AlterUserResponse, error) {
	out := new(AlterUserResponse)
	err := c.cc.Invoke(ctx, "/dylk.Vales/AlterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valesClient) AuthUser(ctx context.Context, in *UserCredentialsRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	out := new(AuthUserResponse)
	err := c.cc.Invoke(ctx, "/dylk.Vales/AuthUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValesServer is the server API for Vales service.
// All implementations must embed UnimplementedValesServer
// for forward compatibility
type ValesServer interface {
	AlterUser(context.Context, *UserDataRequest) (*AlterUserResponse, error)
	AuthUser(context.Context, *UserCredentialsRequest) (*AuthUserResponse, error)
	mustEmbedUnimplementedValesServer()
}

// UnimplementedValesServer must be embedded to have forward compatible implementations.
type UnimplementedValesServer struct {
}

func (UnimplementedValesServer) AlterUser(context.Context, *UserDataRequest) (*AlterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterUser not implemented")
}
func (UnimplementedValesServer) AuthUser(context.Context, *UserCredentialsRequest) (*AuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedValesServer) mustEmbedUnimplementedValesServer() {}

// UnsafeValesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValesServer will
// result in compilation errors.
type UnsafeValesServer interface {
	mustEmbedUnimplementedValesServer()
}

func RegisterValesServer(s grpc.ServiceRegistrar, srv ValesServer) {
	s.RegisterService(&Vales_ServiceDesc, srv)
}

func _Vales_AlterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValesServer).AlterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dylk.Vales/AlterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValesServer).AlterUser(ctx, req.(*UserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vales_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValesServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dylk.Vales/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValesServer).AuthUser(ctx, req.(*UserCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vales_ServiceDesc is the grpc.ServiceDesc for Vales service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vales_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dylk.Vales",
	HandlerType: (*ValesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AlterUser",
			Handler:    _Vales_AlterUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _Vales_AuthUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vales.proto",
}
